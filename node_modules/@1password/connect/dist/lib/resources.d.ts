import { FullItem } from "../model/fullItem";
import { Item as SimpleItem } from "../model/models";
import { Vault } from "../model/vault";
import { RequestAdapter, Response } from "./requests";
declare class OPResource {
    protected adapter: RequestAdapter;
    constructor(adapter: RequestAdapter);
}
export declare class Vaults extends OPResource {
    private basePath;
    /**
     * Return all vaults the Service Account has permission to view.
     */
    list(): Promise<Vault[]>;
    /**
     * Fetch basic information about all items in specified Vault
     *
     * @param vaultId
     */
    listItems(vaultId: string): Promise<SimpleItem[]>;
    /**
     * Get metadata about a single vault
     *
     * @param vaultId
     */
    getVault(vaultId: string): Promise<Vault>;
}
export declare class Items extends OPResource {
    private basePath;
    create(vaultId: string, item: FullItem): Promise<FullItem>;
    update(vaultId: any, item: FullItem): Promise<FullItem>;
    get(vaultId: string, opts: GetItemOptions): Promise<FullItem>;
    delete(vaultId: string, itemId: string): Promise<Response>;
    private getById;
    /**
     * Searches for an Item with a case-sensitive, exact match on title.
     * If found, queries for complete item details and returns result.
     *
     * @param {string} vaultId
     * @param {string} title
     * @returns {Promise<FullItem>}
     * @private
     */
    private getByTitle;
}
declare type GetItemOptions = {
    itemId: string;
    title?: never;
} | {
    title: string;
    itemId?: never;
};
export {};
