"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPClient = void 0;
const http = __importStar(require("http"));
const https = __importStar(require("https"));
// eslint-disable-next-line @typescript-eslint/tslint/config
const axios_1 = __importDefault(require("axios"));
const metadata_1 = require("./metadata");
/**
 * The default Request Client used by the SDK if customer does not
 * provide their own client.
 */
class HTTPClient {
    constructor(conf) {
        this.defaultTimeout = 15000; // 15 seconds
        this.defaultHeaders = {
            "content-type": "application/json",
            "user-agent": `connect-sdk-js/${metadata_1.getVersion()}`,
        };
        this.axios = this.initAxios(conf);
    }
    request(method, url, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestCfg = {
                method,
                url,
                timeout: opts.timeout,
                data: opts.data,
                params: opts.params,
                headers: Object.assign({}, this.defaultHeaders, opts.headers, {
                    authorization: `Bearer ${opts.authToken}`,
                }),
            };
            const response = yield this.axios.request(requestCfg);
            return { status: response.status, data: response.data };
        });
    }
    /**
     * Factory helper that sets up axios with settings relevant to the connector.
     *
     * @param {ClientConfig} conf
     */
    initAxios(conf) {
        conf = conf || {};
        const axiosConfig = {
            timeout: conf.timeout || this.defaultTimeout,
            headers: this.defaultHeaders,
        };
        if (conf.keepAlive) {
            axiosConfig.httpsAgent = new https.Agent({ keepAlive: true });
            axiosConfig.httpAgent = new http.Agent({ keepAlive: true });
        }
        const axiosInstance = axios_1.default.create(axiosConfig);
        axiosInstance.interceptors.response.use((response) => response, 
        // eslint-disable-next-line @typescript-eslint/promise-function-async,@typescript-eslint/tslint/config
        (error) => {
            if (error.response && error.response.data) {
                return Promise.reject(error.response.data);
            }
            else {
                return Promise.reject(error);
            }
        });
        return axiosInstance;
    }
}
exports.HTTPClient = HTTPClient;
//# sourceMappingURL=client.js.map