import { FullItem } from "../model/fullItem";
import { Item as SimpleItem } from "../model/item";
import { Vault } from "../model/vault";
import { IRequestClient } from "./client";
export interface OPConfig {
    serverURL: string;
    token: string;
    httpClient?: IRequestClient;
    keepAlive?: boolean;
    timeout?: number;
}
/**
 * OnePasswordConnect client factory.
 *
 * @param {OPConfig} opts
 * @returns {OPConnect}
 */
export declare const newConnectClient: (opts: OPConfig) => OPConnect;
declare class OPConnect {
    private vaults;
    private items;
    private readonly httpAdapter;
    constructor(opts: OPConfig);
    /**
     * Returns a list of all Vaults the Service Account has permission
     * to view.
     *
     * @returns {Promise<Vault[]>}
     */
    listVaults(): Promise<Vault[]>;
    /**
     * Get details about a specific vault.
     *
     * If the Service Account does not have permission to view the vault, an
     * error is returned.
     *
     * @param {string} vaultId
     * @returns {Promise<Vault>}
     */
    getVault(vaultId: string): Promise<Vault>;
    /**
     * Lists all Items inside a specific Vault.
     *
     * @param {string} vaultId
     * @returns {Promise<SimpleItem[]>}
     */
    listItems(vaultId: string): Promise<SimpleItem[]>;
    /**
     * Get details about a specific Item in a Vault.
     *
     * @param {string} vaultId
     * @param {string} itemId
     * @returns {Promise<FullItem>}
     */
    getItem(vaultId: string, itemId: string): Promise<FullItem>;
    /**
     * Get details about a specific item with a matching Title value.
     *
     * The Item Title is case-sensitive and must be an exact-match.
     *
     * @param {string} vaultId
     * @param {string} title
     * @returns {Promise<FullItem>}
     */
    getItemByTitle(vaultId: string, title: string): Promise<FullItem>;
    /**
     * Creates a new Item inside the specified Vault.
     *
     * @param {string} vaultId
     * @param {FullItem} item
     * @returns {Promise<FullItem>}
     */
    createItem(vaultId: string, item: FullItem): Promise<FullItem>;
    /**
     * Perform a replacement update of an Item. The given `item` object will
     * overwrite the existing item in the Vault.
     *
     * @param {string} vaultId
     * @param {FullItem} item
     * @returns {Promise<FullItem>}
     */
    updateItem(vaultId: string, item: FullItem): Promise<FullItem>;
    /**
     * Deletes a single Item matching the given Item ID.
     *
     * @param {string} vaultId
     * @param {string} itemId
     * @returns {Promise<void>}
     */
    deleteItem(vaultId: string, itemId: string): Promise<void>;
}
export {};
